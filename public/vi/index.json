[
{
	"uri": "http://localhost:1313/ws_FCJ_HoangNam/vi/1-introduce/",
	"title": "Gi∆°ÃÅi thi√™Ã£u",
	"tags": [],
	"description": "",
	"content": "B·ªëi c·∫£nh v√† ƒê·ªông l·ª±c Trong th·ªùi ƒë·∫°i d·ªØ li·ªáu b√πng n·ªï, vi·ªác x·ª≠ l√Ω v√† ph√¢n t√≠ch d·ªØ li·ªáu m·ªôt c√°ch hi·ªáu qu·∫£, t·ª± ƒë·ªông, v√† c√≥ kh·∫£ nƒÉng m·ªü r·ªông linh ho·∫°t l√† y·∫øu t·ªë then ch·ªët gi√∫p c√°c t·ªï ch·ª©c hi·ªán ƒë·∫°i ƒë∆∞a ra quy·∫øt ƒë·ªãnh k·ªãp th·ªùi v√† t·ªëi ∆∞u quy tr√¨nh kinh doanh.\nƒê·ªÅ t√†i ‚ÄúX√¢y d·ª±ng Serverless Data Processing Pipeline v·ªõi AWS Step Functions v√† Amazon EventBridge‚Äù tr√¨nh b√†y m·ªôt gi·∫£i ph√°p x·ª≠ l√Ω d·ªØ li·ªáu kh√¥ng m√°y ch·ªß (serverless), t·∫≠n d·ª•ng s·ª©c m·∫°nh c·ªßa c√°c d·ªãch v·ª• Amazon Web Services (AWS) nh·∫±m ƒë√°p ·ª©ng c√°c y√™u c·∫ßu v·ªÅ hi·ªáu su·∫•t, ƒë·ªô linh ho·∫°t v√† t·ªëi ∆∞u chi ph√≠.\nPipeline ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ t·ª± ƒë·ªông x·ª≠ l√Ω c√°c t·ªáp CSV ƒë∆∞·ª£c t·∫£i l√™n Amazon S3, s·ª≠ d·ª•ng Amazon EventBridge ƒë·ªÉ k√≠ch ho·∫°t quy tr√¨nh khi ph√°t hi·ªán t·ªáp m·ªõi, v√† AWS Step Functions ƒë·ªÉ ƒëi·ªÅu ph·ªëi t·ª´ng b∆∞·ªõc x·ª≠ l√Ω ‚Äî bao g·ªìm ki·ªÉm tra ƒë·ªãnh d·∫°ng, x·ª≠ l√Ω song song, t·ªïng h·ª£p k·∫øt qu·∫£ v√† l∆∞u tr·ªØ.\nC√°c t√°c v·ª• x·ª≠ l√Ω ƒë∆∞·ª£c th·ª±c hi·ªán b·ªüi c√°c h√†m AWS Lambda. Metadata ƒë∆∞·ª£c l∆∞u v√†o Amazon DynamoDB, th√¥ng b√°o tr·∫°ng th√°i ƒë∆∞·ª£c g·ª≠i qua Amazon SNS, v√† to√†n b·ªô h·ªá th·ªëng ƒë∆∞·ª£c gi√°m s√°t b·ªüi Amazon CloudWatch ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªáu su·∫•t v√† ph√°t hi·ªán l·ªói k·ªãp th·ªùi.\n∆Øu ƒëi·ªÉm c·ªßa Gi·∫£i ph√°p Serverless v·ªõi Step Functions v√† EventBridge H·ªá th·ªëng s·ª≠ d·ª•ng c√°c d·ªãch v·ª• ch·ªß l·ª±c nh∆∞ Amazon S3, EventBridge, Step Functions, Lambda, DynamoDB, CloudWatch, v√† SNS, ƒëem l·∫°i nhi·ªÅu l·ª£i √≠ch n·ªïi b·∫≠t:\nT·ª± ƒë·ªông h√≥a ho√†n to√†n:\nQuy tr√¨nh ƒë∆∞·ª£c k√≠ch ho·∫°t v√† ƒëi·ªÅu ph·ªëi t·ª± ƒë·ªông d·ª±a tr√™n s·ª± ki·ªán.\nKh·∫£ nƒÉng m·ªü r·ªông linh ho·∫°t:\nT·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh theo kh·ªëi l∆∞·ª£ng c√¥ng vi·ªác, h·ªó tr·ª£ x·ª≠ l√Ω song song.\nT·ªëi ∆∞u chi ph√≠ v·∫≠n h√†nh:\nM√¥ h√¨nh tr·∫£ ph√≠ theo m·ª©c s·ª≠ d·ª•ng, kh√¥ng c·∫ßn duy tr√¨ h·∫° t·∫ßng v·∫≠t l√Ω.\nX·ª≠ l√Ω l·ªói th√¥ng minh:\nLogic retry t·ª± ƒë·ªông, th√¥ng b√°o l·ªói qua SNS v√† theo d√µi l·ªói qua CloudWatch.\nLinh ho·∫°t \u0026amp; d·ªÖ b·∫£o tr√¨:\nWorkflow d·ªÖ d√†ng c·∫≠p nh·∫≠t, t√°ch bi·ªát c√°c ch·ª©c nƒÉng b·∫±ng Lambda.\nGi√°m s√°t hi·ªáu qu·∫£:\nCloudWatch cung c·∫•p log v√† c·∫£nh b√°o theo th·ªùi gian th·ª±c.\nX√°c th·ª±c d·ªØ li·ªáu ƒë·∫ßu v√†o:\nƒê·∫£m b·∫£o d·ªØ li·ªáu h·ª£p l·ªá tr∆∞·ªõc khi x·ª≠ l√Ω.\nV·∫≠n h√†nh ƒë∆°n gi·∫£n:\nD·ªÖ d√†ng qu·∫£n l√Ω v√≤ng ƒë·ªùi t√†i nguy√™n: t·∫°o, c·∫≠p nh·∫≠t, x√≥a.\nPh√π h·ª£p th·ª±c ti·ªÖn:\n√Åp d·ª•ng t·ªët cho nhi·ªÅu t√¨nh hu·ªëng nh∆∞ ETL, ph√¢n t√≠ch d·ªØ li·ªáu theo l√¥, h·ªá th·ªëng ph√¢n t√≠ch s·ª± ki·ªán th·ªùi gian th·ª±c.\n"
},
{
	"uri": "http://localhost:1313/ws_FCJ_HoangNam/vi/",
	"title": "Serverless Data Processing Pipeline",
	"tags": [],
	"description": "",
	"content": "X√¢y d·ª±ng Pipeline X·ª≠ l√Ω D·ªØ li·ªáu Serverless v·ªõi AWS Step Functions v√† EventBridge üìå T·ªïng quan Trong b·ªëi c·∫£nh c√¥ng ngh·ªá hi·ªán ƒë·∫°i, nhu c·∫ßu x·ª≠ l√Ω d·ªØ li·ªáu l·ªõn m·ªôt c√°ch hi·ªáu qu·∫£, linh ho·∫°t v√† ti·∫øt ki·ªám chi ph√≠ ng√†y c√†ng tr·ªü n√™n c·∫•p thi·∫øt. C√°c t·ªï ch·ª©c v√† doanh nghi·ªáp c·∫ßn nh·ªØng gi·∫£i ph√°p c√≥ kh·∫£ nƒÉng m·ªü r·ªông linh ho·∫°t, d·ªÖ qu·∫£n l√Ω, v√† lo·∫°i b·ªè g√°nh n·∫∑ng v·∫≠n h√†nh h·∫° t·∫ßng ph·ª©c t·∫°p.\nC√¥ng ngh·ªá serverless tr√™n n·ªÅn t·∫£ng ƒë√°m m√¢y ƒë√£ n·ªïi l√™n nh∆∞ m·ªôt h∆∞·ªõng ƒëi t·ªëi ∆∞u, cho ph√©p x√¢y d·ª±ng c√°c h·ªá th·ªëng x·ª≠ l√Ω d·ªØ li·ªáu m·∫°nh m·∫Ω m√† kh√¥ng c·∫ßn qu·∫£n l√Ω m√°y ch·ªß v·∫≠t l√Ω, t·ª´ ƒë√≥ gi·∫£m thi·ªÉu chi ph√≠ v·∫≠n h√†nh, tƒÉng t·ªëc ƒë·ªô tri·ªÉn khai v√† kh·∫£ nƒÉng t·ª± ƒë·ªông h√≥a cao.\nüß© M√¥ t·∫£ t·ªïng quan pipeline Pipeline serverless n√†y x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ c√°c t·ªáp CSV ƒë∆∞·ª£c t·∫£i l√™n Amazon S3. Amazon EventBridge nh·∫≠n s·ª± ki·ªán t·ª´ S3, l·ªçc c√°c t·ªáp .csv, v√† k√≠ch ho·∫°t AWS Step Functions ƒë·ªÉ ƒëi·ªÅu ph·ªëi c√°c b∆∞·ªõc x·ª≠ l√Ω. AWS Lambda th·ª±c hi·ªán c√°c t√°c v·ª• nh∆∞ x√°c th·ª±c, x·ª≠ l√Ω song song, t·ªïng h·ª£p, v√† l∆∞u k·∫øt qu·∫£. Amazon DynamoDB l∆∞u metadata, Amazon CloudWatch gi√°m s√°t hi·ªáu su·∫•t v√† l·ªói, Amazon SNS g·ª≠i th√¥ng b√°o email v·ªÅ tr·∫°ng th√°i pipeline.\nT·∫•t c·∫£ ƒë∆∞·ª£c tri·ªÉn khai t·∫°i Region Singapore (ap-southeast-1).\nüß± C√°c th√†nh ph·∫ßn ch√≠nh Amazon S3\nInput Bucket: L∆∞u tr·ªØ t·ªáp CSV ƒë·∫ßu v√†o\ndata-processing-input-\u0026lt;your-account-id\u0026gt; Output Bucket: L∆∞u tr·ªØ k·∫øt qu·∫£ JSON\ndata-processing-output-\u0026lt;your-account-id\u0026gt; Amazon EventBridge\nL·ªçc s·ª± ki·ªán ObjectCreated t·ª´ S3 cho c√°c t·ªáp .csv v√† k√≠ch ho·∫°t Step Functions AWS Step Functions (State Machine: DataProcessingWorkflow)\nValidateData: Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa t·ªáp CSV ParallelProcess: X·ª≠ l√Ω song song hai nh√°nh (ProcessData1, ProcessData2) AggregateData: T·ªïng h·ª£p k·∫øt qu·∫£ t·ª´ c√°c nh√°nh song song StoreResults: L∆∞u k·∫øt qu·∫£ v√†o S3 v√† metadata v√†o DynamoDB NotifySuccess: G·ª≠i th√¥ng b√°o th√†nh c√¥ng qua SNS ErrorHandler: G·ª≠i th√¥ng b√°o l·ªói qua SNS AWS Lambda\nValidateDataFunction: Ki·ªÉm tra ƒë·ªãnh d·∫°ng CSV ProcessDataFunction: X·ª≠ l√Ω d·ªØ li·ªáu (g·ªçi trong c√°c nh√°nh song song) AggregateDataFunction: T·ªïng h·ª£p k·∫øt qu·∫£ StoreResultsFunction: L∆∞u k·∫øt qu·∫£ v√† metadata Amazon DynamoDB\nB·∫£ng ProcessingMetadata l∆∞u th√¥ng tin nh∆∞: ExecutionId, Timestamp, Status Amazon CloudWatch\nGhi log v√† thi·∫øt l·∫≠p c·∫£nh b√°o khi c√≥ l·ªói Amazon SNS\nTopic: PipelineNotifications g·ª≠i email th√¥ng b√°o tr·∫°ng th√°i IAM Roles\nLambdaDataProcessingRole: Quy·ªÅn cho Lambda truy c·∫≠p S3, DynamoDB, SNS StepFunctionsDataProcessingRole: Quy·ªÅn cho Step Functions g·ªçi Lambda v√† SNS üîÅ Lu·ªìng d·ªØ li·ªáu Ng∆∞·ªùi d√πng t·∫£i t·ªáp CSV (v√≠ d·ª•: test.csv) l√™n S3 Input Bucket\nS3 t·∫°o s·ª± ki·ªán ObjectCreated, g·ª≠i ƒë·∫øn EventBridge\nEventBridge Rule (S3TriggerRule) l·ªçc t·ªáp .csv v√† k√≠ch ho·∫°t Step Functions (DataProcessingWorkflow)\nStep Functions ƒëi·ªÅu ph·ªëi:\nValidateData: G·ªçi ValidateDataFunction ƒë·ªÉ ki·ªÉm tra CSV ParallelProcess: Ch·∫°y hai nh√°nh song song, m·ªói nh√°nh g·ªçi ProcessDataFunction AggregateData: G·ªçi AggregateDataFunction ƒë·ªÉ t·ªïng h·ª£p k·∫øt qu·∫£ StoreResults: G·ªçi StoreResultsFunction ƒë·ªÉ l∆∞u v√†o S3 Output Bucket v√† DynamoDB NotifySuccess: G·ª≠i th√¥ng b√°o th√†nh c√¥ng qua SNS ErrorHandler: G·ª≠i th√¥ng b√°o l·ªói qua SNS n·∫øu c√≥ l·ªói ·ªü b·∫•t k·ª≥ b∆∞·ªõc n√†o CloudWatch ghi log v√† k√≠ch ho·∫°t c·∫£nh b√°o n·∫øu c√≥ l·ªói\nSNS g·ª≠i email th√¥ng b√°o tr·∫°ng th√°i pipeline (th√†nh c√¥ng ho·∫∑c l·ªói)\n"
},
{
	"uri": "http://localhost:1313/ws_FCJ_HoangNam/vi/2-preparation/",
	"title": "Chu√¢Ãân biÃ£",
	"tags": [],
	"description": "",
	"content": "C√°c B∆∞·ªõc Chu·∫©n B·ªã 1. T·∫°o C√°c Th√†nh Ph·∫ßn IAM B∆∞·ªõc 1: T·∫°o IAM User Group Truy c·∫≠p AWS Console: https://console.aws.amazon.com/iam Ch·ªçn User groups ‚Üí Create group ƒê·∫∑t t√™n nh√≥m: devGr G√°n quy·ªÅn: Ch·ªçn policy c√≥ s·∫µn: AdministratorAccess Nh·∫•n Create group B∆∞·ªõc 2: T·∫°o IAM User Truy c·∫≠p m·ª•c Users ‚Üí ch·ªçn Add users Nh·∫≠p t√™n: dev-user Ch·ªçn Access Type: Programmatic access (ƒë·ªÉ d√πng AWS CLI) AWS Management Console access (ƒë·ªÉ ƒëƒÉng nh·∫≠p web) Thi·∫øt l·∫≠p m·∫≠t kh·∫©u ho·∫∑c ƒë·ªÉ AWS t·∫°o ng·∫´u nhi√™n Th√™m user v√†o group: ch·ªçn devGr Nh·∫•n Create user B∆∞·ªõc 3: T·∫°o AWS Access Key Trong danh s√°ch users, click v√†o user dev-user Chuy·ªÉn sang tab Security credentials ·ªû m·ª•c Access keys, nh·∫•n Create access key Ch·ªçn m·ª•c ƒë√≠ch s·ª≠ d·ª•ng: CLI Sau khi t·∫°o th√†nh c√¥ng, b·∫°n s·∫Ω nh·∫≠n: Access key ID Secret access key ‚ö†Ô∏è L∆∞u l·∫°i ngay, v√¨ b·∫°n ch·ªâ th·∫•y Secret access key duy nh·∫•t m·ªôt l·∫ßn! 2. C√†i ƒê·∫∑t v√† C·∫•u H√¨nh AWS CLI C√†i ƒê·∫∑t AWS CLI tr√™n Windows M·ªü h·ªôp tho·∫°i Run (Windows + R), d√°n l·ªánh sau ƒë·ªÉ t·∫£i v√† c√†i: msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi Ki·ªÉm Tra Phi√™n B·∫£n CLI aws --version C·∫•u H√¨nh CLI aws configure Nh·∫≠p c√°c th√¥ng tin sau:\n\u0026ndash; Access Key ID\n\u0026ndash; Secret Access Key\n\u0026ndash; Region (v√≠ d·ª•: ap-southeast-1)\n\u0026ndash; Output format (v√≠ d·ª•: json)\n3. T·∫°o T·ªáp CSV T·∫°o File CSV Nh·∫•n Windows + R ‚Üí g√µ notepad\nD√°n n·ªôi dung sau:\nid,name,amount 1,John,100 2,Jane,200 Ch·ªçn Save As:\nT√™n file: test.csv\nSave as type: All Files (.)\nEncoding: UTF-8\nƒê·∫£m b·∫£o kh√¥ng l∆∞u th√†nh .txt\n"
},
{
	"uri": "http://localhost:1313/ws_FCJ_HoangNam/vi/3-creates3/",
	"title": "T·∫°o S3 Buckets",
	"tags": [],
	"description": "",
	"content": "‚òÅÔ∏è B∆∞·ªõc 1: T·∫°o S3 Buckets Amazon S3 ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu ƒë·∫ßu v√†o (input) v√† ƒë·∫ßu ra (output) cho pipeline x·ª≠ l√Ω d·ªØ li·ªáu.\n1. Truy c·∫≠p S3 Console V√†o AWS Console: https://console.aws.amazon.com/s3 G√µ S3 v√†o thanh t√¨m ki·∫øm v√† ch·ªçn Amazon S3 2. T·∫°o Bucket ƒê·∫ßu V√†o (Input Bucket) Nh·∫•n Create bucket\nThi·∫øt l·∫≠p th√¥ng tin:\nBucket name: data-processing-input-123456789012\n(thay 123456789012 b·∫±ng AWS Account ID c·ªßa b·∫°n)\nRegion: Ch·ªçn Asia Pacific (Singapore) - ap-southeast-1\nObject Ownership: Ch·ªçn ACLs disabled\nBlock Public Access: Gi·ªØ m·∫∑c ƒë·ªãnh (ch·∫∑n t·∫•t c·∫£ truy c·∫≠p c√¥ng khai)\nEncryption: B·∫≠t Enable v·ªõi t√πy ch·ªçn\nServer-side encryption with Amazon S3-managed keys (SSE-S3)\nNh·∫•n Create bucket\n‚ö†Ô∏è N·∫øu g·∫∑p l·ªói \u0026quot;Bucket name already exists\u0026quot;, h√£y th√™m h·∫≠u t·ªë ng·∫´u nhi√™n, v√≠ d·ª•:\ndata-processing-input-123456789012-v1\n3. T·∫°o Bucket ƒê·∫ßu Ra (Output Bucket) L·∫∑p l·∫°i c√°c b∆∞·ªõc tr√™n ƒë·ªÉ t·∫°o bucket: Bucket name: data-processing-output-123456789012 4. Ki·ªÉm Tra Bucket V√†o tab Buckets, x√°c nh·∫≠n ƒë√£ t·∫°o ƒë∆∞·ª£c c·∫£: data-processing-input-123456789012 data-processing-output-123456789012 T√πy Ch·ªçn: T·∫£i file test.csv l√™n Input Bucket V√†o bucket data-processing-input-123456789012 Nh·∫•n Upload Ch·ªçn file test.csv ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥ Nh·∫•n Upload ƒë·ªÉ t·∫£i l√™n "
},
{
	"uri": "http://localhost:1313/ws_FCJ_HoangNam/vi/4-create-iam-roles/",
	"title": "T·∫°o IAM Roles",
	"tags": [],
	"description": "",
	"content": "B∆∞·ªõc 2: T·∫°o IAM Roles IAM Roles d√πng ƒë·ªÉ c·∫•p quy·ªÅn truy c·∫≠p cho c√°c d·ªãch v·ª• AWS Lambda v√† AWS Step Functions trong qu√° tr√¨nh x·ª≠ l√Ω d·ªØ li·ªáu.\n1. Truy c·∫≠p IAM Console V√†o AWS Console: https://console.aws.amazon.com/iam T√¨m IAM ‚Üí ch·ªçn Roles ‚Üí nh·∫•n Create role 2. T·∫°o Role Cho Lambda Trusted entity type: Ch·ªçn AWS service ‚Üí ch·ªçn Lambda Nh·∫•n Next G√°n Permissions: Nh·∫•n Add permissions\nT√¨m v√† ch·ªçn c√°c policy sau:\nAWSLambdaBasicExecutionRole (ghi log l√™n CloudWatch) AmazonS3FullAccess (quy·ªÅn truy c·∫≠p S3) AmazonDynamoDBFullAccess (truy c·∫≠p DynamoDB) AmazonSNSFullAccess (g·ª≠i th√¥ng b√°o qua SNS) üîí Khuy·∫øn ngh·ªã b·∫£o m·∫≠t: Thay v√¨ d√πng FullAccess, n√™n t·∫°o ch√≠nh s√°ch tu·ª≥ ch·ªânh gi·ªõi h·∫°n quy·ªÅn theo t√†i nguy√™n c·ª• th·ªÉ (n√™u ·ªü ph·∫ßn sau)\nNh·∫•n Next ‚Üí ƒë·∫∑t t√™n role: LambdaDataProcessingRole Nh·∫•n Create role 3. T·∫°o Role Cho Step Functions Quay l·∫°i IAM \u0026gt; Roles ‚Üí Create role Trusted entity type: Ch·ªçn AWS service ‚Üí ch·ªçn Step Functions Nh·∫•n Next G√°n Permissions: T√¨m v√† ch·ªçn c√°c policy sau:\nAWSLambdaFullAccess (ƒë·ªÉ Step Functions g·ªçi Lambda) AmazonS3FullAccess AmazonDynamoDBFullAccess CloudWatchLogsFullAccess AmazonSNSFullAccess Nh·∫•n Next ‚Üí ƒë·∫∑t t√™n role: StepFunctionsDataProcessingRole\nNh·∫•n Create role\n4. Ki·ªÉm Tra Roles Truy c·∫≠p IAM \u0026gt; Roles\nT√¨m v√† x√°c nh·∫≠n ƒë√£ t·∫°o 2 role:\nLambdaDataProcessingRole StepFunctionsDataProcessingRole "
},
{
	"uri": "http://localhost:1313/ws_FCJ_HoangNam/vi/5-createlambda/",
	"title": "T·∫°o Lambda Funtion",
	"tags": [],
	"description": "",
	"content": "B∆∞·ªõc 3: T·∫°o Lambda Functions T·∫°o 4 h√†m Lambda ƒë·ªÉ x·ª≠ l√Ω c√°c b∆∞·ªõc trong pipeline x·ª≠ l√Ω d·ªØ li·ªáu serverless.\n1. Truy c·∫≠p Lambda Console V√†o AWS Console: https://console.aws.amazon.com/lambda T√¨m Lambda ‚Üí ch·ªçn Functions ‚Üí nh·∫•n Create function 2. T·∫°o ValidateDataFunction Function name: ValidateDataFunction Runtime: Python 3.9 (ho·∫∑c m·ªõi h∆°n) Architecture: x86_64 Permissions: Ch·ªçn Use an existing role ‚Üí ch·ªçn LambdaDataProcessingRole Nh·∫•n Create function ‚úÖ Code (tab Code \u0026gt; Code source): import json import boto3 import csv import io def lambda_handler(event, context): s3 = boto3.client(\u0026#39;s3\u0026#39;) try: bucket = event[\u0026#39;Records\u0026#39;][0][\u0026#39;s3\u0026#39;][\u0026#39;bucket\u0026#39;][\u0026#39;name\u0026#39;] key = event[\u0026#39;Records\u0026#39;][0][\u0026#39;s3\u0026#39;][\u0026#39;object\u0026#39;][\u0026#39;key\u0026#39;] response = s3.get_object(Bucket=bucket, Key=key) data = response[\u0026#39;Body\u0026#39;].read().decode(\u0026#39;utf-8\u0026#39;) csv_reader = csv.reader(io.StringIO(data)) headers = next(csv_reader, None) if not headers or len(headers) \u0026lt; 2: raise Exception(\u0026#34;Invalid CSV: Missing or insufficient headers\u0026#34;) first_row = next(csv_reader, None) if not first_row: raise Exception(\u0026#34;Invalid CSV: No data rows\u0026#34;) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps({ \u0026#39;bucket\u0026#39;: bucket, \u0026#39;key\u0026#39;: key, \u0026#39;valid\u0026#39;: True, \u0026#39;headers\u0026#39;: headers }) } except Exception as e: raise Exception(f\u0026#34;Validation failed: {str(e)}\u0026#34;) Nh·∫•n Deploy Configuration: Timeout: 30 gi√¢y Memory: 256 MB Environment variables: INPUT_BUCKET = data-processing-input-123456789012 3.T·∫°o ProcessDataFunction T·∫°o function t∆∞∆°ng t·ª±, ƒë·∫∑t t√™n: ProcessDataFunction import json def lambda_handler(event, context): try: data = json.loads(event[\u0026#39;body\u0026#39;]) bucket = data[\u0026#39;bucket\u0026#39;] key = data[\u0026#39;key\u0026#39;] processed_data = { \u0026#39;result\u0026#39;: f\u0026#34;Processed file {key} from {bucket}\u0026#34;, \u0026#39;transformed\u0026#39;: True } return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps(processed_data) } except Exception as e: raise Exception(f\u0026#34;Processing failed: {str(e)}\u0026#34;) Nh·∫•n Deploy Configuration: Timeout: 30 gi√¢y Memory: 256 MB 4. T·∫°o AggregateDataFunction T·∫°o function t∆∞∆°ng t·ª±, ƒë·∫∑t t√™n: AggregateDataFunction import json def lambda_handler(event, context): try: results = [json.loads(item[\u0026#39;body\u0026#39;]) for item in event] aggregated = { \u0026#39;aggregated_result\u0026#39;: [r[\u0026#39;result\u0026#39;] for r in results], \u0026#39;total_branches\u0026#39;: len(results) } return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps(aggregated) } except Exception as e: raise Exception(f\u0026#34;Aggregation failed: {str(e)}\u0026#34;) Nh·∫•n Deploy Configuration: Timeout: 30 gi√¢y Memory: 256 MB 5. T·∫°o StoreResultsFunction T·∫°o function t∆∞∆°ng t·ª±, ƒë·∫∑t t√™n:StoreResultsFunction\nimport json import boto3 import datetime def lambda_handler(event, context): s3 = boto3.client(\u0026#39;s3\u0026#39;) dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(\u0026#39;ProcessingMetadata\u0026#39;) try: data = json.loads(event[\u0026#39;body\u0026#39;]) output_bucket = \u0026#39;data-processing-output-123456789012\u0026#39; # Thay b·∫±ng Bucket c·ªßa b·∫°n output_key = f\u0026#34;results/processed_{datetime.datetime.now().isoformat()}.json\u0026#34; s3.put_object(Bucket=output_bucket, Key=output_key, Body=json.dumps(data)) table.put_item(Item={ \u0026#39;ExecutionId\u0026#39;: context.aws_request_id, \u0026#39;Timestamp\u0026#39;: datetime.datetime.now().isoformat(), \u0026#39;OutputKey\u0026#39;: output_key, \u0026#39;Status\u0026#39;: \u0026#39;Success\u0026#39; }) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;status\u0026#39;: \u0026#39;Stored successfully\u0026#39;, \u0026#39;output_key\u0026#39;: output_key}) } except Exception as e: raise Exception(f\u0026#34;Storage failed: {str(e)}\u0026#34;) Nh·∫•n Deploy Thay data-processing-output-123456789012 b·∫±ng t√™n output bucket th·ª±c t·∫ø c·ªßa b·∫°n Configuration: Timeout: 1 ph√∫t Memory: 512 MB 6. Ki·ªÉm Tra Lambda Functions V√†o t·ª´ng Lambda function ‚Üí ch·ªçn tab Test ‚Üí nh·∫•n Create test event D√°n n·ªôi dung JSON sau: { \u0026#34;Records\u0026#34;: [ { \u0026#34;s3\u0026#34;: { \u0026#34;bucket\u0026#34;: {\u0026#34;name\u0026#34;: \u0026#34;data-processing-input-123456789012\u0026#34;}, \u0026#34;object\u0026#34;: {\u0026#34;key\u0026#34;: \u0026#34;test.csv\u0026#34;} } } ] } Nh·∫•n Test, sau ƒë√≥ ki·ªÉm tra log ·ªü tab Monitor \u0026gt; Logs "
},
{
	"uri": "http://localhost:1313/ws_FCJ_HoangNam/vi/6-createdynamodbtable/",
	"title": "T·∫°o DynamoDB Table",
	"tags": [],
	"description": "",
	"content": "B∆∞·ªõc 4: T·∫°o DynamoDB Table DynamoDB s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l∆∞u tr·ªØ metadata cho t·ª´ng l·∫ßn th·ª±c thi pipeline.\n1. Truy c·∫≠p DynamoDB Console M·ªü AWS Console T√¨m DynamoDB ‚Üí ch·ªçn Tables ‚Üí nh·∫•n Create table 2. C·∫•u h√¨nh b·∫£ng Table name: ProcessingMetadata Partition key: ExecutionId (Ki·ªÉu: String) Sort key: (ƒë·ªÉ tr·ªëng) Table settings: Ch·ªçn On-demand (Pay-per-request) ƒë·ªÉ t·ª± ƒë·ªông co gi√£n theo l∆∞u l∆∞·ª£ng Nh·∫•n Create table 3. Ki·ªÉm tra b·∫£ng Truy c·∫≠p m·ª•c Tables ƒê·∫£m b·∫£o b·∫£ng ProcessingMetadata ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng "
},
{
	"uri": "http://localhost:1313/ws_FCJ_HoangNam/vi/7-createsnstopic/",
	"title": "T·∫°o SNS Topic",
	"tags": [],
	"description": "",
	"content": "B∆∞·ªõc 5: T·∫°o SNS Topic Amazon SNS s·∫Ω ƒë∆∞·ª£c d√πng ƒë·ªÉ g·ª≠i th√¥ng b√°o tr·∫°ng th√°i pipeline qua email.\n1. Truy c·∫≠p SNS Console M·ªü AWS Console T√¨m SNS Ch·ªçn Topics ‚Üí nh·∫•n Create topic 2. C·∫•u h√¨nh Topic Type: Standard Name: PipelineNotifications Nh·∫•n Create topic 3. T·∫°o Subscription (ƒêƒÉng k√Ω nh·∫≠n th√¥ng b√°o) Trong topic PipelineNotifications, ch·ªçn Create subscription Protocol: Email Endpoint: Nh·∫≠p ƒë·ªãa ch·ªâ email b·∫°n mu·ªën nh·∫≠n th√¥ng b√°o Nh·∫•n Create subscription M·ªü email v√† x√°c nh·∫≠n ƒëƒÉng k√Ω b·∫±ng c√°ch nh·∫•n v√†o li√™n k·∫øt x√°c nh·∫≠n 4. L·∫•y ARN c·ªßa Topic Quay l·∫°i tab Topics Nh·∫•n v√†o PipelineNotifications Ghi l·∫°i Topic ARN, v√≠ d·ª•: (arn:aws:sns:ap-southeast-1:123456789012:PipelineNotifications) "
},
{
	"uri": "http://localhost:1313/ws_FCJ_HoangNam/vi/8-createstepfunctions/",
	"title": "T·∫°o Step Functions State Machine",
	"tags": [],
	"description": "",
	"content": "B∆∞·ªõc 6: T·∫°o Step Functions State Machine AWS Step Functions s·∫Ω ƒëi·ªÅu ph·ªëi to√†n b·ªô pipeline x·ª≠ l√Ω d·ªØ li·ªáu serverless.\n1. Truy c·∫≠p Step Functions Console M·ªü AWS Console T√¨m Step Functions Ch·ªçn State machines ‚Üí nh·∫•n Create state machine 2. Ch·ªçn lo·∫°i state machine Author with code Type: Standard 3. ƒê·ªãnh nghƒ©a State Machine D√°n ƒëo·∫°n m√£ JSON ƒë·ªãnh nghƒ©a workflow { \u0026#34;Comment\u0026#34;: \u0026#34;Serverless Data Processing Pipeline\u0026#34;, \u0026#34;StartAt\u0026#34;: \u0026#34;ValidateData\u0026#34;, \u0026#34;States\u0026#34;: { \u0026#34;ValidateData\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:ap-southeast-1:123456789012:function:ValidateDataFunction\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;ParallelProcess\u0026#34;, \u0026#34;Retry\u0026#34;: [ { \u0026#34;ErrorEquals\u0026#34;: [ \u0026#34;States.ALL\u0026#34; ], \u0026#34;IntervalSeconds\u0026#34;: 3, \u0026#34;MaxAttempts\u0026#34;: 3, \u0026#34;BackoffRate\u0026#34;: 2 } ], \u0026#34;Catch\u0026#34;: [ { \u0026#34;ErrorEquals\u0026#34;: [ \u0026#34;States.ALL\u0026#34; ], \u0026#34;ResultPath\u0026#34;: \u0026#34;$.error\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;ErrorHandler\u0026#34; } ] }, \u0026#34;ParallelProcess\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Parallel\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;AggregateData\u0026#34;, \u0026#34;Branches\u0026#34;: [ { \u0026#34;StartAt\u0026#34;: \u0026#34;ProcessData1\u0026#34;, \u0026#34;States\u0026#34;: { \u0026#34;ProcessData1\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:ap-southeast-1:123456789012:function:ProcessDataFunction\u0026#34;, \u0026#34;End\u0026#34;: true } } }, { \u0026#34;StartAt\u0026#34;: \u0026#34;ProcessData2\u0026#34;, \u0026#34;States\u0026#34;: { \u0026#34;ProcessData2\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:ap-southeast-1:123456789012:function:ProcessDataFunction\u0026#34;, \u0026#34;End\u0026#34;: true } } } ], \u0026#34;Catch\u0026#34;: [ { \u0026#34;ErrorEquals\u0026#34;: [ \u0026#34;States.ALL\u0026#34; ], \u0026#34;ResultPath\u0026#34;: \u0026#34;$.error\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;ErrorHandler\u0026#34; } ] }, \u0026#34;AggregateData\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:ap-southeast-1:123456789012:function:AggregateDataFunction\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;StoreResults\u0026#34;, \u0026#34;Retry\u0026#34;: [ { \u0026#34;ErrorEquals\u0026#34;: [ \u0026#34;States.ALL\u0026#34; ], \u0026#34;IntervalSeconds\u0026#34;: 3, \u0026#34;MaxAttempts\u0026#34;: 3, \u0026#34;BackoffRate\u0026#34;: 2 } ], \u0026#34;Catch\u0026#34;: [ { \u0026#34;ErrorEquals\u0026#34;: [ \u0026#34;States.ALL\u0026#34; ], \u0026#34;ResultPath\u0026#34;: \u0026#34;$.error\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;ErrorHandler\u0026#34; } ] }, \u0026#34;StoreResults\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:ap-southeast-1:123456789012:function:StoreResultsFunction\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;NotifySuccess\u0026#34;, \u0026#34;Catch\u0026#34;: [ { \u0026#34;ErrorEquals\u0026#34;: [ \u0026#34;States.ALL\u0026#34; ], \u0026#34;ResultPath\u0026#34;: \u0026#34;$.error\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;ErrorHandler\u0026#34; } ] }, \u0026#34;NotifySuccess\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:states:::sns:publish\u0026#34;, \u0026#34;Parameters\u0026#34;: { \u0026#34;Message\u0026#34;: \u0026#34;Pipeline completed successfully\u0026#34;, \u0026#34;Subject\u0026#34;: \u0026#34;Pipeline Status\u0026#34;, \u0026#34;TopicArn\u0026#34;: \u0026#34;arn:aws:sns:ap-southeast-1:123456789012:PipelineNotifications\u0026#34; }, \u0026#34;End\u0026#34;: true }, \u0026#34;ErrorHandler\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:states:::sns:publish\u0026#34;, \u0026#34;Parameters\u0026#34;: { \u0026#34;Message.$\u0026#34;: \u0026#34;States.JsonToString($.error)\u0026#34;, \u0026#34;Subject\u0026#34;: \u0026#34;Pipeline Error\u0026#34;, \u0026#34;TopicArn\u0026#34;: \u0026#34;arn:aws:sns:ap-southeast-1:123456789012:PipelineNotifications\u0026#34; }, \u0026#34;End\u0026#34;: true } } } Thay th·∫ø c√°c gi√° tr·ªã sau:\n123456789012 ‚Üí b·∫±ng AWS Account ID c·ªßa b·∫°n ARN c·ªßa c√°c Lambda function ‚Üí copy t·ª´ Lambda Console ARN c·ªßa SNS topic ‚Üí copy t·ª´ SNS Console Nh·∫•n Next\n4. C·∫•u h√¨nh State Machine Name: DataProcessingWorkflow\nPermissions:\nCh·ªçn Choose an existing role Ch·ªçn role: StepFunctionsDataProcessingRole Logging:\nB·∫≠t Log to CloudWatch Logs Ch·ªçn m·ª©c log: ALL Nh·∫•n Create state machine 5. Ki·ªÉm tra Quay l·∫°i danh s√°ch State machines ƒê·∫£m b·∫£o th·∫•y DataProcessingWorkflow trong danh s√°ch "
},
{
	"uri": "http://localhost:1313/ws_FCJ_HoangNam/vi/9-createeventbridge/",
	"title": "T·∫°o EventBridge Rule",
	"tags": [],
	"description": "",
	"content": "B∆∞·ªõc 7: T·∫°o EventBridge Rule Amazon EventBridge s·∫Ω l·∫Øng nghe s·ª± ki·ªán t·ª´ S3 v√† k√≠ch ho·∫°t Step Functions khi t·ªáp m·ªõi ƒë∆∞·ª£c t·∫£i l√™n.\n1. Truy c·∫≠p EventBridge Console M·ªü AWS Console T√¨m EventBridge Ch·ªçn Rules ‚Üí nh·∫•n Create rule 2. C·∫•u h√¨nh Rule Name: S3TriggerRule Event source: ch·ªçn Event Pattern Event pattern (JSON): { \u0026#34;source\u0026#34;: [\u0026#34;aws.s3\u0026#34;], \u0026#34;detail-type\u0026#34;: [\u0026#34;Object Created\u0026#34;], \u0026#34;detail\u0026#34;: { \u0026#34;bucket\u0026#34;: { \u0026#34;name\u0026#34;: [\u0026#34;data-processing-input-123456789012\u0026#34;] }, \u0026#34;object\u0026#34;: { \u0026#34;key\u0026#34;: [{\u0026#34;suffix\u0026#34;: \u0026#34;.csv\u0026#34;}] } } } Thay data-processing-input-123456789012 b·∫±ng t√™n bucket. 3. Thi·∫øt l·∫≠p Target Target type: Ch·ªçn Step Functions state machine State machine: ch·ªçn DataProcessingWorkflow Execution role: ch·ªçn Create a new role for this specific resource Nh·∫•n Create 4. Ki·ªÉm tra Rule Quay l·∫°i Rules ƒê·∫£m b·∫£o Rule c√≥ t√™n S3TriggerRule ƒë√£ ƒë∆∞·ª£c t·∫°o v√† ƒëang ·ªü tr·∫°ng th√°i Enabled "
},
{
	"uri": "http://localhost:1313/ws_FCJ_HoangNam/vi/10-configurecloudwatch/",
	"title": "Thi·∫øt l·∫≠p CloudWatch",
	"tags": [],
	"description": "",
	"content": "B∆∞·ªõc 8: Thi·∫øt l·∫≠p CloudWatch Monitoring Amazon CloudWatch s·∫Ω gi√∫p b·∫°n gi√°m s√°t hi·ªáu su·∫•t v√† l·ªói trong h·ªá th·ªëng Pipeline.\n1. Truy c·∫≠p CloudWatch Console V√†o AWS Console T√¨m ki·∫øm CloudWatch v√† m·ªü d·ªãch v·ª• 2. T·∫°o Alarm cho Step Functions Ch·ªçn Alarms ‚Üí Nh·∫•n Create alarm Select metric: Ch·ªçn States ‚Üí Execution Metrics ‚Üí ExecutionsFailed Ch·ªçn workflow: DataProcessingWorkflow Conditions: Threshold: Greater than or equal to 1 Period: 5 minutes Actions: Ch·ªçn: Send notification to SNS topic SNS Topic: PipelineNotifications Alarm name: StepFunctionsFailureAlarm Nh·∫•n Create 3. T·∫°o Alarms cho Lambda Functions L·∫∑p l·∫°i quy tr√¨nh t·∫°o alarm cho t·ª´ng h√†m Lambda v·ªõi metric Errors.\nDanh s√°ch h√†m Lambda: ValidateDataFunction ProcessDataFunction AggregateDataFunction StoreResultsFunction C√°c b∆∞·ªõc th·ª±c hi·ªán: V√†o Alarms ‚Üí Ch·ªçn Create alarm Select metric: Ch·ªçn Lambda ‚Üí By Function Name T√¨m h√†m ‚Üí ch·ªçn metric Errors Conditions: Threshold type: Static Condition: Greater than or equal to 1 Period: 5 minutes Datapoints to alarm: 1 out of 1 Notification: Alarm state trigger: In alarm SNS Topic: PipelineNotifications Alarm name (ƒë·∫∑t t√™n r√µ r√†ng): LambdaValidateDataErrorAlarm LambdaProcessDataErrorAlarm LambdaAggregateDataErrorAlarm LambdaStoreResultsErrorAlarm Nh·∫•n Create 4. Ki·ªÉm tra Logs V√†o m·ª•c Log groups Ki·ªÉm tra c√°c nh√≥m log sau: Lambda: /aws/lambda/ValidateDataFunction /aws/lambda/ProcessDataFunction /aws/lambda/AggregateDataFunction /aws/lambda/StoreResultsFunction Step Functions: /aws/vendedlogs/states/DataProcessingWorkflow "
},
{
	"uri": "http://localhost:1313/ws_FCJ_HoangNam/vi/11-testthepipeline/",
	"title": "T·∫°o EventBridge Rule",
	"tags": [],
	"description": "",
	"content": "B∆∞·ªõc 9: Ki·ªÉm Tra Pipeline Th·ª±c hi·ªán ki·ªÉm tra to√†n b·ªô quy tr√¨nh x·ª≠ l√Ω d·ªØ li·ªáu sau khi ho√†n t·∫•t tri·ªÉn khai.\n1. T·∫£i T·ªáp CSV l√™n S3 Truy c·∫≠p S3 Console V√†o bucket: data-processing-input-123456789012 Nh·∫•n Upload, ch·ªçn t·ªáp test.csv ƒë√£ t·∫°o Nh·∫•n Upload 2. Ki·ªÉm Tra Step Functions Truy c·∫≠p Step Functions Console Ch·ªçn state machine: DataProcessingWorkflow Chuy·ªÉn ƒë·∫øn tab Executions Nh·∫•p v√†o execution m·ªõi nh·∫•t ƒë·ªÉ theo d√µi qu√° tr√¨nh th·ª±c thi Ki·ªÉm tra t·ª´ng b∆∞·ªõc: trong Visual workflow. ValidateData ParallelProcess AggregateData StoreResults NotifySuccess 3. Ki·ªÉm Tra Output V√†o S3 bucket data-processing-output-123456789012 T√¨m th∆∞ m·ª•c results/ v√† m·ªü file JSON k·∫øt qu·∫£ (v√≠ d·ª•: processed_\u0026lt;timestamp\u0026gt;.json) Truy c·∫≠p DynamoDB Console M·ªü b·∫£ng ProcessingMetadata Ch·ªçn Explore table items ƒë·ªÉ xem th√¥ng tin metadata 4. Ki·ªÉm Tra SNS Notifications M·ªü h·ªôp th∆∞ email c·ªßa b·∫°n Ki·ªÉm tra email t·ª´ SNS topic PipelineNotifications 5. X·ª≠ L√Ω L·ªói (n·∫øu c√≥) Truy c·∫≠p CloudWatch Console M·ªü Log groups ‚Üí ki·ªÉm tra log c·ªßa c√°c Lambda function ho·∫∑c Step Functions Truy c·∫≠p l·∫°i Step Functions ‚Üí Executions ƒë·ªÉ xem tr·∫°ng th√°i th·∫•t b·∫°i X√°c ƒë·ªãnh b∆∞·ªõc l·ªói ‚Üí s·ª≠a code Lambda ho·∫∑c JSON c·ªßa state machine n·∫øu c·∫ßn "
},
{
	"uri": "http://localhost:1313/ws_FCJ_HoangNam/vi/12--optimizationandcostanalysis/",
	"title": "T·ªëi ∆Øu H√≥a v√† Ph√¢n T√≠ch Chi Ph√≠",
	"tags": [],
	"description": "",
	"content": "B∆∞·ªõc 10: T·ªëi ∆Øu H√≥a v√† Ph√¢n T√≠ch Chi Ph√≠ 1. T·ªëi ∆∞u h√≥a song song Trong Step Functions, tr·∫°ng th√°i ParallelProcess hi·ªán c√≥ hai nh√°nh. ƒê·ªÉ th√™m nh√°nh:\nTruy c·∫≠p Step Functions Console, ch·ªçn DataProcessingWorkflow, nh·∫•n Edit. Th√™m m·ªôt nh√°nh m·ªõi trong ph·∫ßn Branches c·ªßa tr·∫°ng th√°i ParallelProcess. { \u0026#34;StartAt\u0026#34;: \u0026#34;ProcessData3\u0026#34;, \u0026#34;States\u0026#34;: { \u0026#34;ProcessData3\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:ap-southeast-1:123456789012:function:ProcessDataFunction\u0026#34;, \u0026#34;End\u0026#34;: true } } } Nh·∫•n Save ƒë·ªÉ l∆∞u thay ƒë·ªïi. 2. X·ª≠ l√Ω l·ªói Retry logic: M·ªói b∆∞·ªõc nh∆∞ ValidateData, AggregateData, StoreResults c√≥ 3 l·∫ßn th·ª≠ l·∫°i v·ªõi kho·∫£ng c√°ch 3 gi√¢y, h·ªá s·ªë backoff 2.0. ErrorHandler: Khi l·ªói x·∫£y ra, tr·∫°ng th√°i s·∫Ω chuy·ªÉn t·ªõi ErrorHandler v√† g·ª≠i c·∫£nh b√°o qua SNS. T√πy ch·ªçn n√¢ng cao: B·∫°n c√≥ th·ªÉ b·ªï sung m·ªôt b∆∞·ªõc ghi l·ªói v√†o DynamoDB ƒë·ªÉ l∆∞u l·∫°i chi ti·∫øt l·ªói. \u0026#34;ErrorHandler\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:ap-southeast-1:123456789012:function:StoreResultsFunction\u0026#34;, \u0026#34;Parameters\u0026#34;: { \u0026#34;error.$\u0026#34;: \u0026#34;$.error\u0026#34; }, \u0026#34;Next\u0026#34;: \u0026#34;NotifyError\u0026#34; }, \u0026#34;NotifyError\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:states:::sns:publish\u0026#34;, \u0026#34;Parameters\u0026#34;: { \u0026#34;Message.$\u0026#34;: \u0026#34;States.JsonToString($.error)\u0026#34;, \u0026#34;Subject\u0026#34;: \u0026#34;Pipeline Error\u0026#34;, \u0026#34;TopicArn\u0026#34;: \u0026#34;arn:aws:sns:ap-southeast-1:123456789012:PipelineNotifications\u0026#34; }, \u0026#34;End\u0026#34;: true } 3. Ph√¢n t√≠ch chi ph√≠ S3: ~$0.023/GB/th√°ng (Standard storage, ap-southeast-1). Lambda: ~$0.20/1M requests + $0.0000167/GB-s. Step Functions: ~$0.025/1000 state transitions. EventBridge: ~$1.00/1M events. DynamoDB: ~$1.25/1M ghi (On-demand mode). SNS: ~$0.50/1M notifications. S·ª≠ d·ª•ng AWS Cost Explorer (trong AWS Console) ƒë·ªÉ theo d√µi chi ph√≠ theo ng√†y/th√°ng. 4. T·ªëi ∆∞u chi ph√≠ D√πng S3 Intelligent-Tiering ƒë·ªÉ t·ªëi ∆∞u chi ph√≠ l∆∞u tr·ªØ. Gi·∫£m b·ªô nh·ªõ Lambda n·∫øu kh√¥ng c·∫ßn thi·∫øt (256 MB th∆∞·ªùng l√† ƒë·ªß). Chuy·ªÉn sang DynamoDB Provisioned Capacity n·∫øu c√≥ th·ªÉ ∆∞·ªõc l∆∞·ª£ng tr∆∞·ªõc t·∫£i h·ªá th·ªëng. "
},
{
	"uri": "http://localhost:1313/ws_FCJ_HoangNam/vi/13-scalabilitytesting/",
	"title": "Ki·ªÉm Tra Kh·∫£ NƒÉng M·ªü R·ªông",
	"tags": [],
	"description": "",
	"content": "B∆∞·ªõc 11: Ki·ªÉm Tra Kh·∫£ NƒÉng M·ªü R·ªông 1. T·∫°o Nhanh 100 File CSV T·∫°o file python v·ªõi t√™n l√† create_csv.py import csv import os import random def create_csv_files(num_files=100, folder_name=\u0026#34;csv_files\u0026#34;): # In ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i current_path = os.getcwd() print(f\u0026#34;ƒêang ch·∫°y t·ª´: {current_path}\u0026#34;) # T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß full_path = os.path.join(current_path, folder_name) print(f\u0026#34;S·∫Ω t·∫°o file t·∫°i: {full_path}\u0026#34;) # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥ if not os.path.exists(folder_name): os.makedirs(folder_name) print(f\u0026#34;ƒê√£ t·∫°o th∆∞ m·ª•c: {folder_name}\u0026#34;) else: print(f\u0026#34;Th∆∞ m·ª•c {folder_name} ƒë√£ t·ªìn t·∫°i\u0026#34;) # Danh s√°ch t√™n ng·∫´u nhi√™n names = [ \u0026#34;John\u0026#34;, \u0026#34;Jane\u0026#34;, \u0026#34;Alice\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;, \u0026#34;Diana\u0026#34;, \u0026#34;Eve\u0026#34;, \u0026#34;Frank\u0026#34;, \u0026#34;Grace\u0026#34;, \u0026#34;Henry\u0026#34;, \u0026#34;Ivy\u0026#34;, \u0026#34;Jack\u0026#34;, \u0026#34;Kate\u0026#34;, \u0026#34;Leo\u0026#34;, \u0026#34;Mia\u0026#34;, \u0026#34;Nick\u0026#34;, \u0026#34;Olivia\u0026#34;, \u0026#34;Paul\u0026#34;, \u0026#34;Quinn\u0026#34;, \u0026#34;Rose\u0026#34;, \u0026#34;Sam\u0026#34;, \u0026#34;Tina\u0026#34;, \u0026#34;Uma\u0026#34;, \u0026#34;Victor\u0026#34;, \u0026#34;Wendy\u0026#34;, \u0026#34;Xavier\u0026#34;, \u0026#34;Yara\u0026#34;, \u0026#34;Zoe\u0026#34;, \u0026#34;Anna\u0026#34;, \u0026#34;Ben\u0026#34;, \u0026#34;Chloe\u0026#34;, \u0026#34;David\u0026#34; ] print(f\u0026#34;B·∫Øt ƒë·∫ßu t·∫°o {num_files} file CSV...\u0026#34;) for i in range(2, num_files + 2): filename = f\u0026#34;{folder_name}/test{i}.csv\u0026#34; with open(filename, \u0026#39;w\u0026#39;, newline=\u0026#39;\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as csvfile: writer = csv.writer(csvfile) # Header writer.writerow([\u0026#39;id\u0026#39;, \u0026#39;name\u0026#39;, \u0026#39;amount\u0026#39;]) # T·∫°o d·ªØ li·ªáu ng·∫´u nhi√™n (3-4 d√≤ng m·ªói file) rows = random.randint(3, 4) for j in range(1, rows + 1): row = [ j, random.choice(names), random.randint(50, 9999) # Amount t·ª´ 50 ƒë·∫øn 9999 ] writer.writerow(row) # In progress m·ªói 10 file if i % 10 == 0: print(f\u0026#34;ƒê√£ t·∫°o {i-1} file...\u0026#34;) print(f\u0026#34;‚úÖ HO√ÄN TH√ÄNH! ƒê√£ t·∫°o {num_files} file CSV trong th∆∞ m·ª•c \u0026#39;{folder_name}\u0026#39;\u0026#34;) print(f\u0026#34;üìÅ ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß: {full_path}\u0026#34;) print(f\u0026#34;üìÑ File t·ª´ test2.csv ƒë·∫øn test{num_files + 1}.csv\u0026#34;) # Li·ªát k√™ 5 file ƒë·∫ßu ti√™n ƒë·ªÉ ki·ªÉm tra print(\u0026#34;\\nüîç Ki·ªÉm tra m·ªôt s·ªë file ƒë√£ t·∫°o:\u0026#34;) for i in range(2, 7): # test2.csv ƒë·∫øn test6.csv filepath = os.path.join(folder_name, f\u0026#34;test{i}.csv\u0026#34;) if os.path.exists(filepath): print(f\u0026#34; ‚úì {filepath}\u0026#34;) else: print(f\u0026#34; ‚úó {filepath} - KH√îNG T√åM TH·∫§Y\u0026#34;) # Ch·∫°y h√†m if __name__ == \u0026#34;__main__\u0026#34;: create_csv_files(100) Nh·∫•n Run ƒë·ªÉ ch·∫°y ch∆∞∆°ng tr√¨nh 2. TƒÉng T·∫£i T·∫°o 100 t·ªáp CSV m·∫´u. S·ª≠ d·ª•ng AWS CLI ƒë·ªÉ t·∫£i l√™n h√†ng lo·∫°t: aws s3 cp ./test-files/ s3://data-processing-input-123456789012/ --recursive Ho·∫∑c t·∫£i l√™n th·ªß c√¥ng th√¥ng qua S3 Console: Truy c·∫≠p bucket data-processing-input-123456789012 Nh·∫•n Upload ‚Üí Ch·ªçn c√°c t·ªáp .csv ‚Üí Nh·∫•n Upload 3. Ki·ªÉm Tra Hi·ªáu Su·∫•t A. Ki·ªÉm Tra S·ªë L∆∞·ª£ng Executions (Step Functions) Truy c·∫≠p AWS Step Functions Console Ch·ªçn state machine DataProcessingWorkflow Nh·∫•n v√†o tab Executions M·ªói file .csv t·∫£i l√™n th√†nh c√¥ng s·∫Ω kh·ªüi t·∫°o 1 execution üìå N·∫øu b·∫°n upload 100 file ‚Üí b·∫°n n√™n th·∫•y kho·∫£ng 100 executions\nL∆∞u √Ω:\nN·∫øu th·∫•y √≠t h∆°n s·ªë file upload: C√≥ th·ªÉ EventBridge ch∆∞a k√≠ch ho·∫°t ƒë√∫ng Lambda trigger l·ªói ho·∫∑c timeout B. Gi√°m S√°t Hi·ªáu Su·∫•t V·ªõi CloudWatch 1. M·ªü Metrics Cho Lambda: Truy c·∫≠p CloudWatch Console Ch·ªçn tab Metrics ‚Üí nh·∫•n All metrics Ch·ªçn: Lambda ‚Üí By Function Name Ch·ªçn c√°c h√†m: ValidateDataFunction ProcessDataFunction AggregateDataFunction StoreResultsFunction Metric √ù Nghƒ©a Duration Th·ªùi gian trung b√¨nh ch·∫°y m·ªói h√†m (ms). N·∫øu \u0026gt;1000ms ‚Üí n√™n t·ªëi ∆∞u l·∫°i Invocations S·ªë l·∫ßn ƒë∆∞·ª£c g·ªçi. C√≥ ƒë√∫ng b·∫±ng s·ªë file ƒë√£ upload kh√¥ng? Errors S·ªë l·ªói x·∫£y ra trong Lambda Throttles C√≥ b·ªã gi·ªõi h·∫°n do thi·∫øu t√†i nguy√™n kh√¥ng (concurrency th·∫•p?) C. T·ªëi ∆Øu Lambda N·∫øu Pipeline Ch·∫≠m V√†o Lambda Console ‚Üí ch·ªçn h√†m mu·ªën t·ªëi ∆∞u Tab Configuration ‚Üí General configuration Nh·∫•n Edit ƒë·ªÉ ch·ªânh: TƒÉng Memory size t·ª´ 256MB ‚Üí 512MB ho·∫∑c 1024MB RAM tƒÉng s·∫Ω ƒë·ªìng th·ªùi tƒÉng CPU ‚Üí gi√∫p ch·∫°y nhanh h∆°n Nh·∫•n Save üìå G·ª£i √Ω c·∫•u h√¨nh:\nProcessDataFunction, AggregateDataFunction: 512‚Äì1024MB StoreResultsFunction: 256MB 4. S·ª≠ D·ª•ng Distributed Map Cho D·ªØ Li·ªáu L·ªõn Ch·ªânh s·ª≠a ƒë·ªãnh nghƒ©a state machine: Thay tr·∫°ng th√°i Parallel b·∫±ng Map \u0026#34;MapProcess\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Map\u0026#34;, \u0026#34;ItemsPath\u0026#34;: \u0026#34;$.items\u0026#34;, \u0026#34;MaxConcurrency\u0026#34;: 100, \u0026#34;Iterator\u0026#34;: { \u0026#34;StartAt\u0026#34;: \u0026#34;ProcessData\u0026#34;, \u0026#34;States\u0026#34;: { \u0026#34;ProcessData\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:ap-southeast-1:123456789012:function:ProcessDataFunction\u0026#34;, \u0026#34;End\u0026#34;: true } } }, \u0026#34;Next\u0026#34;: \u0026#34;AggregateData\u0026#34; } Y√™u c·∫ßu: Input cho Map ph·∫£i l√† m·∫£ng JSON C·∫ßn s·ª≠a ValidateDataFunction ƒë·ªÉ tr·∫£ v·ªÅ m·∫£ng JSON ph√π h·ª£p "
},
{
	"uri": "http://localhost:1313/ws_FCJ_HoangNam/vi/14-cleanup/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/ws_FCJ_HoangNam/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/ws_FCJ_HoangNam/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]